/*.---------------------------------------------------------------------.
  .		 ____                          __                          		.
  .		/\  _`\                       /\ \__  __                   		.
  .		\ \ \/\_\  _ __    __     __  \ \ ,_\/\_\  __  __     __   		.
  .		 \ \ \/_/_/\`'__\/'__`\ /'__`\ \ \ \/\/\ \/\ \/\ \  /'__`\ 		.
  .		  \ \ \s\ \ \ \//\  __//\ \d\.\_\ \ \_\ \ \ \ \_/ |/\  __/ 		.
  .		   \ \____/\ \_\\ \____\ \__/.\_\\ \__\\ \_\ \___/ \ \____\		.
  .		    \/___/  \/_/ \/____/\/__/\/_/ \/__/ \/_/\/__/   \/____/		.
  .																		.
  .				2014~2015 © Creative Services and Developent			.
  .						  www.creativesd.com.br							.
  .					    www.sbkmod.ragnagreen.com                       .
  .---------------------------------------------------------------------.
  . Script:													            .
  .	   Controle e Gerenciamento de Pontos de Cash e/ou Kafra.			.
  .---------------------------------------------------------------------.
  . Autor: Romulo SM (sbk_)                                 Versão: 1.0	.
  .                                                                     .
  . Compátivel:	rAthena / Hercules e derivações.                    	.
  .---------------------------------------------------------------------.
  . Descrição:															.
  .	   Gerencia a moeda de donate do jogo.                              .
  .---------------------------------------------------------------------.
  . Changelog:                                                          .
  .		* 1.0 [sbk_]                                                    .
  .			- Iniciado o NPC.											.
  *---------------------------------------------------------------------*/
-	script	#cashcontrol	-1,{
OnInit:
	// Configurações de nível de uso de comandos:
	//	<admin @command>,<admin #command>,<player>
	setarray .CC_Atcommand[0], 99, 99, 0;
	
	// Emulador que está sendo utilizado o sistema:
	//	0: Base eAthena/rAthena.
	//	1: Base Hecules.
	set .EmulatorType, 0;
	
	// Máximo de Cash/Kafra Points que uma conta pode ter.
	set .MaxPoints, 10000000;	// De acordo com o INT_MAX do Emualdor.
	
	// Mensagens de Exibições
	set .MSGPOINTINFO$, "Você possue (%d) pontos de Cash e (%d) pontos de Rops.";
	set .MSGGETPOINT$, "Você recebeu (%d) %s.";
	set .MSGDELPOINT$, "Foi removido (%d) %s.";

	// [NÃO EDITE EMBAIXO, SEM NESCESSIDADES]
	bindatcmd "cashcontrol", "#cashcontrol::OnControl2", .CC_Atcommand[0], .CC_Atcommand[1];
	bindatcmd "cashinfo", "#cashcontrol::OnCashInfo", .CC_Atcommand[2], .CC_Atcommand[1];
	end;

OnCashInfo:
	message strcharinfo(0), sprintf(.MSGPOINTINFO$, #CASHPOINTS, #KAFRAPOINTS);
	end;

OnControl2:
	set .@loop_1, 1;
	while( .@loop_1 )
	{
		mes "^FFA500[Controlador de Pontos]^000000";
		mes "Bem-vindo a central de controle de Pontos de Cash e Rops.";
		mes "Em que posso ajudar?";
		next;
		switch( select("- Inclusão de Pontos de Cash/Rops.", "- Remoções de Pontos de Cash/Rops.", "- Consulta.", "^FF0000- Cancelar.^000000") )
		{
			case 1:
				set .@loop_2, 1;
				while( .@loop_2 )
				{
					mes "^FFA500[Controlador de Pontos]^000000";
					mes "Por favor, digite a ^FF0000ID da conta ou o usuário^000000 que deseja adicionar pontos na conta.";
					next;
					input .@UserID$;
					deletearray .@AccountId, getarraysize(.@AccountId);
					deletearray .@UID$, getarraysize(.@UID$);
					query_sql "SELECT `account_id`, `userid` FROM `login` WHERE `account_id`='" + atoi(.@UserID$) + "' OR `userid`='" + .@UserID$ + "'", .@AccountId, .@UID$;

					if( !getarraysize(.@AccountId) )
					{
						mes "^FFA500[Controlador de Pontos]^000000";
						mes "Nenhuma conta foi encontrada com ^FF0000AID/UID '" + .@UserID$ + "'^000000.";
						mes "Deseja tentar novamente?";
						next;
						if( select("- Sim, por favor.", "^FF0000- Não, obrigado.^000000") == 2 )
							set .@loop_2, 0;
					}
					else {
						set .@loop_3, 1;
						while(.@loop_3)
						{
							mes "^FFA500[Controlador de Pontos]^000000";
							set .@getcashpoints, callfunc("getCashInfo", .EmulatorType, 0, .@AccountId[0]);
							set .@getkafpoints, callfunc("getCashInfo", .EmulatorType, 1, .@AccountId[0]);
							mes sprintf("Este usuário possue %d pontos de Cash e %d pontos de Rops, o que deseja fazer?", .@getcashpoints, .@getkafpoints);
							next;
							set .@type, select("- Adicionar Pontos de Cash.", "- Adicionar Pontos de Rops.", "^00008B- Digitar outro usuário.^000000", "^FF0000- Cancelar.^000000")-1;
							
							switch( .@type )
							{
								case 2:
									set .@loop_3, 0;
									break;
								case 3:
									set .@loop_3, 0;
									set .@loop_2, 0;
									set .@loop_1, 0;
									break;
								default:
									set .@loop_4, 1;
									while( .@loop_4 )
									{
										if( !.@type )
										{
											set .@mask$, "Pontos de Cash";
											set .@maxvalue, .@getcashpoints;
										}
										else
										{
											set .@mask$, "Pontos de Rops";
											set .@maxvalue, .@getkafpoints;
										}
										
										if( .@maxvalue >= .MaxPoints )
										{
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Esta conta já está com o máximo de ^00008B" + .@mask$ + "^000000 permitido.";
											next;
											break;
										}
										
										set .@maxvalue, .MaxPoints - .@maxvalue;
										
										mes "^FFA500[Controlador de Pontos]^000000";
										mes "Digite a quantidade de ^00008B" + .@mask$ + "^000000 que deseja adicionar ao usuário ^00008B" + .@UID$[0] + "^000000.";
										mes "^0000FFSendo o minimo 1 e o máximo " + .@maxvalue + ".^000000";
										next;
										input .@addPoint;
										
										if( .@addPoint < 1 || .@addPoint > .@maxvalue )
										{
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Você deve digitar o minimo de 1 ou máximo de " + .@maxvalue + " " + .@mask$ + ".";
											mes "Deseja tentar novamente?";
											next;
											if( select("- Sim, por favor.", "^FF0000- Não, obrigado.^000000") == 2 )
											{
												set .@loop_4, 0;
												set .@loop_3, 0;
												set .@loop_2, 0;
											}
										}
										else {
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Tem certeza que deseja adicionar ^FF0000" + .@addPoint + " " + .@mask$ + "^000000 no usuário ^FF0000" + .@UID$[0] + "^000000?";
											next;
											switch( select("- Sim, por favor.", "- Não, desejo digitar outro usuário.", "- Não, desejo adicionar em ^FF0000'" + .@mask$ + "'^000000.", "- Não desejo digitar novamente.", "^FF0000- Cancelar.^000000") )
											{
												case 1:
													// Adicionar
													set .@CharOnline$, callfunc("GetCharOnline", .@AccountId[0]);
													if( .@CharOnline$ != "0" )
													{
														.@last_rid = getcharid(3);
														detachrid;
														if( attachrid(.@AccountId[0]) )
														{
															message strcharinfo(0), sprintf(.MSGGETPOINT$,.@addPoint,.@mask$);
															if( !.@type )
																set #CASHPOINTS, #CASHPOINTS + .@addPoint;
															else
																set #KAFRAPOINTS, #KAFRAPOINTS + .@addPoint;
															detachrid; 
														}
														
														attachrid(.@last_rid);
													}
													else
														callfunc "updateCashPoint", .EmulatorType, .@type, .@AccountId, 1, .@addPoint;
															
													mes "^FFA500[Controlador de Pontos]^000000";
													mes "A quantidade de " + .@addPoint + " (" + .@mask$ + ") foi adicionada com sucesso!";
													next;
													set .@loop_4, 0;
													set .@loop_3, 0;
													set .@loop_2, 0;
													break;
												case 2:
													set .@loop_4, 0;
													set .@loop_3, 0;
													break;
												case 3:
													set .@loop_4, 0;
													break;
												case 4:
													break;
												case 5:
													set .@loop_4, 0;
													set .@loop_2, 0;
													set .@loop_3, 0;
													break;
											}
										}
									}
									break;
							}
						}
					}
				}
				break;
			case 2:
				set .@loop_2, 1;
				while( .@loop_2 )
				{
					mes "^FFA500[Controlador de Pontos]^000000";
					mes "Por favor, digite a ^FF0000ID da conta ou o usuário^000000 que deseja remover pontos na conta.";
					next;
					input .@UserID$;
					deletearray .@AccountId, getarraysize(.@AccountId);
					deletearray .@UID$, getarraysize(.@UID$);
					query_sql "SELECT `account_id`, `userid` FROM `login` WHERE `account_id`='" + atoi(.@UserID$) + "' OR `userid`='" + .@UserID$ + "'", .@AccountId, .@UID$;

					if( !getarraysize(.@AccountId) )
					{
						mes "^FFA500[Controlador de Pontos]^000000";
						mes "Nenhuma conta foi encontrada com ^FF0000AID/UID '" + .@UserID$ + "'^000000.";
						mes "Deseja tentar novamente?";
						next;
						if( select("- Sim, por favor.", "^FF0000- Não, obrigado.^000000") == 2 )
							set .@loop_2, 0;
					}
					else {
						set .@loop_3, 1;
						while(.@loop_3)
						{
							mes "^FFA500[Controlador de Pontos]^000000";
							set .@getcashpoints, callfunc("getCashInfo", .EmulatorType, 0, .@AccountId[0]);
							set .@getkafpoints, callfunc("getCashInfo", .EmulatorType, 1, .@AccountId[0]);
							mes sprintf("Este usuário possue %d pontos de Cash e %d pontos Rops, o que deseja fazer?", .@getcashpoints, .@getkafpoints);
							next;
							set .@type, select("- Remover Pontos de Cash.", "- Remover Pontos Rops.", "^00008B- Digitar outro usuário.^000000", "^FF0000- Cancelar.^000000")-1;
							
							switch( .@type )
							{
								case 2:
									set .@loop_3, 0;
									break;
								case 3:
									set .@loop_3, 0;
									set .@loop_2, 0;
									set .@loop_1, 0;
									break;
								default:
									set .@loop_4, 1;
									while( .@loop_4 )
									{
										if( !.@type )
										{
											set .@mask$, "Pontos de Cash";
											set .@maxvalue, .@getcashpoints;
										}
										else
										{
											set .@mask$, "Pontos de Rops";
											set .@maxvalue, .@getkafpoints;
										}
										
										if( !.@maxvalue )
										{
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Esta conta já não contém ^00008B" + .@mask$ + "^000000.";
											next;
											break;
										}
										
										mes "^FFA500[Controlador de Pontos]^000000";
										mes "Digite a quantidade de ^00008B" + .@mask$ + "^000000 que deseja remover ao usuário ^00008B" + .@UID$[0] + "^000000.";
										mes "^0000FFSendo o minimo 1 e o máximo " + .@maxvalue + ".^000000";
										next;
										input .@delPoint;
										
										if( .@delPoint < 1 || .@delPoint > .@maxvalue )
										{
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Você deve digitar o minimo de 1 ou máximo de " + .@maxvalue + " " + .@mask$ + ".";
											mes "Deseja tentar novamente?";
											next;
											if( select("- Sim, por favor.", "^FF0000- Não, obrigado.^000000") == 2 )
											{
												set .@loop_4, 0;
												set .@loop_3, 0;
												set .@loop_2, 0;
											}
										}
										else {
											mes "^FFA500[Controlador de Pontos]^000000";
											mes "Tem certeza que deseja remover ^FF0000" + .@delPoint + " " + .@mask$ + "^000000 no usuário ^FF0000" + .@UID$[0] + "^000000?";
											next;
											switch( select("- Sim, por favor.", "- Não, desejo digitar outro usuário.", "- Não, desejo remover em ^FF0000'" + .@mask$ + "'^000000.", "- Não desejo digitar novamente.", "^FF0000- Cancelar.^000000") )
											{
												case 1:
													// remover
													set .@CharOnline$, callfunc("GetCharOnline", .@AccountId[0]);
													if( .@CharOnline$ != "0" )
													{
														.@last_rid = getcharid(3);
														detachrid;
														if( attachrid(.@AccountId[0]) )
														{
															callfunc "updateCashPoint", .EmulatorType, .@type, .@AccountId, 0, .@delPoint;
															message strcharinfo(0), sprintf(.MSGDELPOINT$,.@delPoint,.@mask$);
															if( !.@type )
																set #CASHPOINTS, #CASHPOINTS - .@delPoint;
															else
																set #KAFRAPOINTS, #KAFRAPOINTS - .@delPoint;
															
															detachrid; 
														}
														else
															callfunc "updateCashPoint", .EmulatorType, .@type, .@AccountId, 0, .@delPoint;
														
														attachrid(.@last_rid);
													}
													else
														callfunc "updateCashPoint", .EmulatorType, .@type, .@AccountId, 0, .@delPoint;
															
													mes "^FFA500[Controlador de Pontos]^000000";
													mes "A quantidade de " + .@delPoint + " (" + .@mask$ + ") foi removida com sucesso!";
													next;
													set .@loop_4, 0;
													set .@loop_3, 0;
													set .@loop_2, 0;
													break;
												case 2:
													set .@loop_4, 0;
													set .@loop_3, 0;
													break;
												case 3:
													set .@loop_4, 0;
													break;
												case 4:
													break;
												case 5:
													set .@loop_4, 0;
													set .@loop_2, 0;
													set .@loop_3, 0;
													break;
											}
										}
									}
									break;
							}
						}
					}
				}
				break;
			case 3:
				set .@loop_2, 1;
				while( .@loop_2 )
				{
					mes "^FFA500[Controlador de Pontos]^000000";
					mes "Por favor, digite a ^FF0000ID da conta ou o usuário^000000 que deseja consultar pontos na conta.";
					next;
					input .@UserID$;
					deletearray .@AccountId, getarraysize(.@AccountId);
					deletearray .@UID$, getarraysize(.@UID$);
					query_sql "SELECT `account_id`, `userid` FROM `login` WHERE `account_id`='" + atoi(.@UserID$) + "' OR `userid`='" + .@UserID$ + "'", .@AccountId, .@UID$;

					if( !getarraysize(.@AccountId) )
					{
						mes "^FFA500[Controlador de Pontos]^000000";
						mes "Nenhuma conta foi encontrada com ^FF0000AID/UID '" + .@UserID$ + "'^000000.";
						mes "Deseja tentar novamente?";
						next;
						if( select("- Sim, por favor.", "^FF0000- Não, obrigado.^000000") == 2 )
							set .@loop_2, 0;
					}
					else {
						mes "^FFA500[Controlador de Pontos]^000000";
						set .@getcashpoints, callfunc("getCashInfo", .EmulatorType, 0, .@AccountId[0]);
						set .@getkafpoints, callfunc("getCashInfo", .EmulatorType, 1, .@AccountId[0]);
						mes sprintf("Este usuário possue %d pontos de Cash e %d pontos Rops.", .@getcashpoints, .@getkafpoints);
						next;
						set .@loop_2, 0;
					}
				}
				break;
			case 4:
				set .@loop_1, 0;
				break;
		}
	}

	mes "^FFA500[Controlador de Pontos]^000000";
	mes "Volte quando nescessitar de nosso sistema!";
	close;
}

// getCashInfo(<emulator>,<0:cash/1:kafra>,<aid>);
function	script	getCashInfo	{
	set .@key$, (!getarg(1)?"#CASHPOINTS":"#KAFRAPOINTS");
	if( !getarg(0) )
	{
		query_sql "SELECT `account_id`, `value` FROM `global_reg_value` WHERE `str`='" + .@key$ + "' AND `account_id`='" + getarg(2) + "'", .@aid, .@value;
		
		if( !getarraysize(.@aid) )
		{
			query_sql "INSERT INTO `global_reg_value` (`account_id`, `str`, `type`, `value`) VALUES (" + getarg(2) + ", '" + .@key$ + "', 2, 0)";
			return 0;
		}
	}
	else
	{
		query_sql "SELECT `account_id`, `value` FROM `acc_reg_num` WHERE `key`='" + .@key$ + "' AND `account_id`='" + getarg(2) + "'", .@aid, .@value;
		
		if( !getarraysize(.@aid) )
		{
			query_sql "INSERT INTO `acc_reg_num` (`account_id`, `key`, `value`) VALUES (" + getarg(2) + ", '" + .@key$ + "', 0)";
			return 0;
		}
	}
	return .@value;
}

// updateCashPoint(<emulator>,<0:cash/1:kafra>,<aid>,<add/removeflag>,<points>);
//
//	add: 1
//	remove: 0
function	script	updateCashPoint	{
	set .@key$, (!getarg(1)?"#CASHPOINTS":"#KAFRAPOINTS");
	if( !getarg(0) )
		query_sql "UPDATE `global_reg_value` SET `value`=`value`" + (getarg(3)?"+":"-") + "'" + getarg(4) + "' WHERE `str`='" + .@key$ + "' AND `account_id`='" + getarg(2) + "'", .@aid, .@value;
	else
		query_sql "UPDATE `acc_reg_num` SET `value`=`value`" + (getarg(3)?"+":"-") + "'" + getarg(4) + "' WHERE `key`='" + .@key$ + "' AND `account_id`='" + getarg(2) + "'", .@aid, .@value;

	return 1;
}